/*
비둘기집의 원리에 의해서 1, 11, 111, 1111, 11111..... N+1개의 1로만 이루어진 수가 있다고 가정해보자
이 수들을 N으로 나눠주면 적어도 두개의 수는 나머지가 같게된다. 이 두개의 수를 N의 배수라고 가정해보자.

이 두수는 모두 1로 이루어져 있고 자리수가 다르기 때문에 뺄셈을 했을경우 111111....000이라는 수가 나오게 된다. 하지만 이 11111...000이라는 수도 N의 배수가 되어야 한다.
0이라는 자리수는 2, 5의 배수로만 형성될 수 있다.(2와 5만 배를 했을 때, 0이 생긴다.) 따라서 0을 모두 제거하면 2와 5의 배수가 아닌 N은 1로만 이루어진 수로 나타낼 수 있음이 자명하다.
*/

#include<iostream>

using namespace std;

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(NULL); cout.tie(NULL);
	
	int N;
	while (cin >> N) {
		int num = 0;
		for (int i = 1; i <= N; i++) {
			num = num * 10 + 1;
            //num %= N => 1을 계속 더해가면 long long범위를 넘어가기 때문에 모듈러 연산법칙을 이용해야 한다.
			num %= N;
			if (!num) {
				cout << i << "\n";
				break;
			}
		}
	}
	
	return 0;
}